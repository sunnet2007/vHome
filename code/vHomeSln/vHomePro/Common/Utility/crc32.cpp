#include "stdafx.h"
#include "crc32.h"



int CRCpoly = 0xEDB88320;// #define CRCpoly 0xEDB88320
unsigned long Crc32Table[256]=
{
	0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
	0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
	0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
	0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
	0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
	0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
	0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
	0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
	0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
	0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
	0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
	0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
	0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
	0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
	0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
	0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
	0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
	0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
	0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
	0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
	0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
	0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
	0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
	0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
	0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
	0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
	0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
	0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
	0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
	0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
	0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
	0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};
unsigned char KeyTable[1024] = 
{
	0xEF, 0x02, 0x2D, 0x00, 0xDF, 0x9B, 0x8A, 0x07, 0x8E, 0x38, 0x24, 0x0F, 0xBE, 0xC5, 0x05, 0x0A, 
	0x2B, 0x88, 0xEE, 0x6D, 0x1B, 0xF7, 0x51, 0x6B, 0x4A, 0x96, 0x69, 0x64, 0x7A, 0x09, 0x49, 0x65, 
	0x67, 0x0B, 0xAC, 0xDB, 0x57, 0x82, 0x0D, 0xDD, 0x06, 0xF5, 0xB6, 0xD6, 0x36, 0x58, 0x94, 0xD3, 
	0xA3, 0xDF, 0x70, 0xB6, 0x93, 0x70, 0xD0, 0xB1, 0xC2, 0xC1, 0xF7, 0xB8, 0xF2, 0x4E, 0xDB, 0xBF, 
	0xFF, 0x19, 0x41, 0xB7, 0xCF, 0xA4, 0x68, 0xB0, 0x9E, 0x03, 0x50, 0xBA, 0xAE, 0x9A, 0xEB, 0xBE, 
	0x3B, 0x55, 0x0C, 0xDB, 0x0B, 0xCA, 0x25, 0xDE, 0x5A, 0x27, 0x8F, 0xD5, 0x6A, 0x98, 0x34, 0xD4, 
	0x77, 0xC4, 0xD6, 0x6C, 0x47, 0x29, 0xF2, 0x6B, 0x16, 0xDA, 0xC9, 0x63, 0x26, 0x53, 0x71, 0x66, 
	0xB3, 0x52, 0x95, 0x01, 0x83, 0xDD, 0xBA, 0x06, 0xD2, 0x70, 0x14, 0x10, 0xE2, 0xFF, 0xAD, 0x08, 
	0xCF, 0x34, 0x37, 0x6E, 0xFF, 0xC9, 0x71, 0x69, 0xAE, 0x46, 0x3A, 0x61, 0x9E, 0xD7, 0x00, 0x68, 
	0x0B, 0xD2, 0xF5, 0x03, 0x3B, 0x4D, 0x3A, 0x05, 0x6A, 0x0C, 0x85, 0x0E, 0x5A, 0x73, 0x3D, 0x0B, 
	0x47, 0xB1, 0xC1, 0xB5, 0x77, 0x1C, 0x08, 0xB3, 0x26, 0x8F, 0xC0, 0xBC, 0x16, 0xFE, 0x7A, 0xBD, 
	0x83, 0xBD, 0x8C, 0xD8, 0xB3, 0x52, 0xC5, 0xDF, 0xE2, 0xA3, 0xFF, 0xD6, 0xD2, 0x2C, 0xC4, 0xD1, 
	0xDF, 0x87, 0x3C, 0xD9, 0xEF, 0x16, 0x7D, 0xDE, 0xBE, 0x55, 0x37, 0xD8, 0x8E, 0xE8, 0xF3, 0xD0, 
	0x1B, 0x6B, 0x01, 0xB5, 0x2B, 0xD4, 0x3F, 0xB4, 0x7A, 0x51, 0x78, 0xBB, 0x4A, 0xCE, 0x3A, 0xBE, 
	0x57, 0x9E, 0xBD, 0x02, 0x67, 0x0F, 0xFA, 0x05, 0x36, 0xC0, 0xC4, 0x0D, 0x06, 0x2D, 0x85, 0x0C, 
	0x93, 0xF4, 0x7E, 0x6F, 0xA3, 0x7B, 0xC1, 0x68, 0xF2, 0x0E, 0x0A, 0x62, 0xC2, 0xA1, 0xC8, 0x66, 
	0xAE, 0x6E, 0x9D, 0xDC, 0x9E, 0xDF, 0x9D, 0xDB, 0xCF, 0x8C, 0xD6, 0xD2, 0xFF, 0x01, 0xD3, 0xD5, 
	0x6A, 0x3C, 0xE2, 0xB1, 0x5A, 0xD3, 0xE0, 0xB6, 0x0B, 0x62, 0x97, 0xC0, 0x3B, 0xED, 0x99, 0xB9, 
	0x26, 0xA7, 0x1E, 0x08, 0x16, 0x36, 0x1B, 0x01, 0x47, 0x99, 0x63, 0x0A, 0x77, 0x24, 0x64, 0x0F, 
	0xE2, 0x23, 0x60, 0x6A, 0xD2, 0x9C, 0x62, 0x6D, 0x83, 0xFD, 0x28, 0x65, 0xB3, 0x62, 0x27, 0x64, 
	0xBE, 0x5D, 0x98, 0x6B, 0x8E, 0xD0, 0x92, 0x6C, 0xDF, 0x3F, 0xD9, 0x65, 0xEF, 0xAE, 0xDF, 0x62, 
	0x7A, 0xF1, 0xD6, 0x06, 0x4A, 0x7E, 0xDB, 0x01, 0x1B, 0xCB, 0xA3, 0x09, 0x2B, 0x64, 0x9C, 0x10, 
	0x36, 0x78, 0x22, 0xB1, 0x06, 0x05, 0x29, 0xB8, 0x57, 0xA6, 0x5F, 0xBF, 0x67, 0x37, 0x5A, 0xBA, 
	0xF2, 0xBE, 0x6D, 0xDD, 0xC2, 0x21, 0x66, 0xDA, 0x93, 0xC4, 0x1E, 0xD4, 0xA3, 0x3B, 0x23, 0xD5, 
	0x8E, 0x08, 0xC2, 0xB2, 0xBE, 0x85, 0x69, 0xB5, 0xEF, 0x32, 0x8F, 0xBC, 0xDF, 0x9B, 0x2A, 0xBC, 
	0x4A, 0x1E, 0x0D, 0xE0, 0x7A, 0xB1, 0xA6, 0xD8, 0x2B, 0x40, 0x4E, 0xD2, 0x1B, 0xCF, 0xF3, 0xD7, 
	0x06, 0xD5, 0x57, 0x6A, 0x36, 0x68, 0xF3, 0x6E, 0x67, 0xAB, 0x08, 0x68, 0x57, 0x32, 0xB0, 0x61, 
	0xC2, 0x79, 0x96, 0x04, 0xF2, 0xE6, 0x3B, 0x03, 0xA3, 0x67, 0xD3, 0x0A, 0x93, 0xD8, 0x6C, 0x0E, 
	0x9E, 0x43, 0xEE, 0x05, 0xAE, 0xAA, 0x4B, 0x02, 0xFF, 0x19, 0xA3, 0x0B, 0xCF, 0x94, 0x04, 0x0D, 
	0x5A, 0x8F, 0x2F, 0x69, 0x6A, 0x20, 0x93, 0x6F, 0x3B, 0x6D, 0x68, 0x67, 0x0B, 0x02, 0xC8, 0x62, 
	0x16, 0xEA, 0x6C, 0xDF, 0x26, 0x73, 0xCE, 0xD9, 0x77, 0xF4, 0x35, 0xD1, 0x47, 0x89, 0x93, 0xD8, 
	0xD2, 0xC8, 0xB1, 0xB3, 0xE2, 0x37, 0x11, 0xB4, 0xB3, 0xFA, 0xF6, 0xBD, 0x83, 0x65, 0x5A, 0xBB, 
	0x6C, 0xDA, 0x43, 0xB9, 0x5C, 0x73, 0x6B, 0xC0, 0x0D, 0xC0, 0x10, 0xB7, 0x3D, 0x4D, 0x2C, 0xB2, 
	0xA8, 0x10, 0x0F, 0xD6, 0x98, 0x7F, 0x28, 0xD3, 0xC9, 0xEE, 0x4F, 0xDB, 0xF9, 0x61, 0x75, 0xDC, 
	0xE4, 0x73, 0xD9, 0x63, 0xD4, 0xEA, 0xF4, 0x64, 0x85, 0xAD, 0x8A, 0x6D, 0xB5, 0x10, 0xB2, 0x6A, 
	0x20, 0x17, 0x98, 0x0F, 0x10, 0xA8, 0xBD, 0x0A, 0x41, 0x29, 0xD5, 0x00, 0x71, 0xB6, 0xEE, 0x07, 
	0x7C, 0x51, 0x70, 0x10, 0x4C, 0xDC, 0x4D, 0x09, 0x1D, 0x6B, 0x25, 0x02, 0x2D, 0x02, 0x07, 0x07, 
	0xB8, 0xBD, 0x31, 0x63, 0x88, 0x32, 0x15, 0x66, 0xD9, 0xDF, 0x6A, 0x6C, 0xE9, 0x50, 0x4A, 0x6B, 
	0xF4, 0x4C, 0xEF, 0xD4, 0xC4, 0xB1, 0xD0, 0xD3, 0x95, 0x32, 0xB8, 0xDA, 0xA5, 0xAB, 0x95, 0xDD, 
	0x30, 0x2A, 0xB4, 0xBA, 0x00, 0xB5, 0x93, 0xBF, 0x51, 0xF8, 0xF8, 0xB7, 0x61, 0x87, 0xDC, 0xB0, 
	0x4C, 0xBC, 0x9F, 0xD7, 0x7C, 0x51, 0x20, 0xD2, 0x2D, 0x9E, 0xD8, 0xD8, 0x1D, 0x2F, 0x55, 0xE0, 
	0x88, 0xAA, 0x64, 0xBC, 0xB8, 0x25, 0xE3, 0xBC, 0xE9, 0x94, 0x19, 0xB5, 0xD9, 0xFB, 0x9B, 0xB2, 
	0xC4, 0xE9, 0x20, 0x0E, 0xF4, 0x54, 0x9D, 0x0A, 0xA5, 0xF7, 0x65, 0x03, 0x95, 0x66, 0xE6, 0x04, 
	0x00, 0x25, 0xE2, 0x61, 0x30, 0xBA, 0x64, 0x68, 0x61, 0x5B, 0xAB, 0x6E, 0x51, 0xE4, 0x29, 0x6A, 
	0x5C, 0xEF, 0x99, 0x62, 0x6C, 0x7E, 0x14, 0x67, 0x3D, 0x0D, 0xDB, 0x6F, 0x0D, 0xA0, 0x61, 0x69, 
	0x98, 0xA3, 0x58, 0x0D, 0xA8, 0x0C, 0xDD, 0x0B, 0xF9, 0xB9, 0x25, 0x02, 0xC9, 0x36, 0x9E, 0x05, 
	0xD4, 0x76, 0x24, 0xBB, 0xE4, 0xE7, 0xAA, 0xBD, 0xB5, 0x48, 0x61, 0xB4, 0x85, 0xB5, 0xDB, 0xB3, 
	0x10, 0x7C, 0xEF, 0xD8, 0x20, 0x03, 0x68, 0xD1, 0x71, 0x66, 0xA0, 0xD9, 0x41, 0xF9, 0x24, 0xDF, 
	0x2D, 0x16, 0x79, 0x65, 0x1D, 0x87, 0xB3, 0x64, 0x4C, 0x04, 0xFC, 0x6A, 0x7C, 0x79, 0xC2, 0x6D, 
	0xE9, 0xB4, 0xB7, 0x09, 0xD9, 0x4B, 0xFC, 0x0E, 0x88, 0x8A, 0xC6, 0x07, 0xB8, 0x15, 0x7F, 0x00, 
	0xA5, 0x3F, 0x03, 0xC0, 0x95, 0xCE, 0x49, 0xB9, 0xC4, 0x61, 0x82, 0xB1, 0xF4, 0xEC, 0x3C, 0xB6, 
	0x61, 0x6B, 0x4E, 0xD3, 0x51, 0xE4, 0x86, 0xD6, 0x00, 0x95, 0x41, 0xDD, 0x30, 0xFA, 0x05, 0xDC, 
	0x3D, 0xA5, 0x7E, 0xD4, 0x0D, 0x18, 0xBF, 0xD5, 0x5C, 0xD7, 0xF9, 0xDD, 0x6C, 0x46, 0xB6, 0xDA, 
	0xF9, 0x89, 0xC3, 0xBE, 0xC9, 0x16, 0x02, 0xBA, 0x98, 0x93, 0xBA, 0xB0, 0xA8, 0x2C, 0x7D, 0xB7, 
	0xB5, 0xF0, 0xFF, 0x08, 0x85, 0x7D, 0x3C, 0x10, 0xD4, 0xCE, 0x86, 0x06, 0xE4, 0x5F, 0x47, 0x01, 
	0x71, 0x66, 0x41, 0x66, 0x41, 0xC9, 0x83, 0x63, 0x10, 0x3C, 0x4C, 0x6C, 0x20, 0xB3, 0x0A, 0x6D, 
	0x0D, 0x80, 0x6F, 0x0B, 0x3D, 0xFD, 0xCC, 0x0E, 0x6C, 0x5A, 0xE6, 0x04, 0x5C, 0xC3, 0xC7, 0x03, 
	0xC9, 0xC6, 0xB0, 0x67, 0xF9, 0x59, 0x14, 0x61, 0xA8, 0xB8, 0xAB, 0x69, 0x98, 0x47, 0x8B, 0x6E, 
	0x85, 0x1D, 0xEE, 0xD1, 0xB5, 0xB0, 0x4F, 0xD7, 0xE4, 0x43, 0x79, 0xDF, 0xD4, 0xCA, 0x56, 0xD8, 
	0x41, 0x11, 0x33, 0xBD, 0x71, 0x7E, 0x92, 0xBC, 0x20, 0x2F, 0x3A, 0xB3, 0x10, 0xA0, 0x1D, 0xB6, 
	0x1D, 0xDB, 0x82, 0xBE, 0x2D, 0x42, 0xAA, 0xBB, 0x7C, 0xE1, 0x11, 0xB4, 0x4C, 0x5C, 0xAD, 0xB4, 
	0xD9, 0xD7, 0xCD, 0xD0, 0xE9, 0x68, 0xE7, 0xD7, 0xB8, 0x05, 0xD1, 0xDE, 0x88, 0x9A, 0x76, 0xD9, 
	0x95, 0x92, 0x18, 0x67, 0xA5, 0x1B, 0x34, 0x62, 0xF4, 0x6C, 0x8B, 0x68, 0xC4, 0x01, 0x33, 0x6F, 
	0x51, 0x40, 0x57, 0x0C, 0x61, 0xAF, 0x7C, 0x0D, 0x30, 0x22, 0x56, 0x06, 0x00, 0x8D, 0xEF, 0x02
};

/***************************************************************************
* Description: GetCRC32Table函数获得crc余数表
***************************************************************************/

void GetCRC32Table()
{
	unsigned long ulCrc;
	for( int i = 0; i < 256; i++ )
	{
		ulCrc = i;
		for( int j =0; j < 8; j++ )
		{
			if( ulCrc & 1 )
			{
				ulCrc = (ulCrc >> 1)^CRCpoly;
			}
			else
			{
				ulCrc >>= 1;
			}
		}
		Crc32Table[i] = ulCrc;
	}
}

void GetKeyTable()
{
	for( int i = 0; i < 256; i++ )
	{
		unsigned long val = Crc32Table[i]<<8;
		val += Crc32Table[255-i]>>8;

		KeyTable[4*i]   = val;
		KeyTable[4*i+1] = val>>8;
		KeyTable[4*i+2] = val>>16;
		KeyTable[4*i+3] = val>>24;
	}
}
/***************************************************************************
* Description: CreateCrc函数计算出给定数据串的CRC-32校验码
* Arguments  : DataBuff     指向数据串的指针
*              BufLen       数据串的长度


* Returns    : 给定数据串的CRC-32校验码
***************************************************************************/

unsigned long GetCrc32( char * pDataBuf, int nBufLen )
{
	unsigned long crc32 = 0x000000FF;
	for( long i = 0; i < nBufLen; i++ )
	{
		crc32 = Crc32Table[(crc32^pDataBuf[i])&0x000000FF]^(crc32>>8);
	}
	return crc32;
}

void EncryptData( char * pDataBuf, int nBufLen )
{
	int k = 0;
	for( long i = 0; i < nBufLen; i++ )
	{
		pDataBuf[i] = pDataBuf[i]^KeyTable[k%1024];
		k++;
	}
}
void DecryptData( char * pDataBuf, int nBufLen )
{
	int k = 0;
	for( long i = 0; i < nBufLen; i++ )
	{
		pDataBuf[i] = pDataBuf[i]^KeyTable[k%1024];
		k++;
	}
}

void SetCRCKey( int nKey )
{
	CRCpoly= nKey;
	GetCRC32Table();
	GetKeyTable();
}

