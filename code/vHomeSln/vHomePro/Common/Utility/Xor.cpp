
#include "stdafx.h"
#include <map>
#include "Xor.h"
#include "StringFuns.h"
#include "Lock.h"

string GetXorKey(string hash) {
	static CLock lock;
	static map<string, string> key_catch;

	string xor_key;

	lock.lock();
	if(key_catch.find(hash) != key_catch.end()) {
		xor_key = key_catch.find(hash)->second;
		lock.unlock();
		return xor_key;
	}
	lock.unlock();

	static unsigned key[64][16] = {
		0x6f, 0x17, 0x24, 0xe2, 0x24, 0x57, 0x85, 0x9b, 0xae, 0xe1, 0xad, 0x0c, 0xdb, 0x1d, 0xf7, 0x7a, 
		0xec, 0x14, 0xd1, 0xe8, 0xeb, 0x7a, 0xb5, 0x39, 0x3f, 0xec, 0x5c, 0x96, 0x7d, 0x76, 0x2e, 0x0f, 
		0x81, 0x58, 0xfc, 0x85, 0xbe, 0x0a, 0xf1, 0xc7, 0xd2, 0x7d, 0xc6, 0xfb, 0x5d, 0xa4, 0x36, 0x40, 
		0x14, 0x33, 0xb2, 0x91, 0x11, 0xa7, 0x55, 0xec, 0x6d, 0x86, 0x1a, 0xb4, 0x11, 0xe8, 0x4d, 0x55, 
		0xc9, 0x36, 0x3f, 0x26, 0x9b, 0x32, 0x3e, 0x93, 0x56, 0x37, 0xc4, 0x7b, 0x6d, 0xc2, 0xef, 0xd7, 
		0x06, 0x32, 0x31, 0x9d, 0x4f, 0xcc, 0x49, 0xe4, 0x11, 0x02, 0x72, 0x48, 0x87, 0xf5, 0xda, 0x90, 
		0x70, 0x38, 0x55, 0x8e, 0x63, 0xd7, 0x53, 0x47, 0x63, 0x98, 0x10, 0x54, 0xb3, 0x80, 0x0a, 0x88, 
		0xeb, 0x99, 0xb8, 0xd3, 0x4c, 0xf3, 0x79, 0x66, 0x51, 0xe9, 0xcb, 0x18, 0x86, 0xa5, 0xbd, 0x09, 
		0x9d, 0xe7, 0xa7, 0x85, 0xbf, 0x01, 0x18, 0x2b, 0x20, 0x27, 0x10, 0x4e, 0xd6, 0xe5, 0x6f, 0x9b, 
		0xeb, 0xf1, 0xae, 0xfc, 0xb1, 0x23, 0xcd, 0xbd, 0x55, 0xc2, 0x8c, 0xee, 0xb7, 0x01, 0xde, 0x08, 
		0x79, 0xc9, 0x9b, 0xd3, 0x57, 0xb9, 0x75, 0x86, 0xb6, 0x6c, 0x2d, 0x30, 0x7f, 0xfa, 0x07, 0x58, 
		0x2d, 0xc1, 0x7b, 0xe0, 0x25, 0x65, 0x2d, 0x30, 0x46, 0x15, 0x1f, 0x90, 0xc2, 0x10, 0x25, 0xd4, 
		0x2c, 0x68, 0x9a, 0x3f, 0xd2, 0x06, 0x52, 0xa2, 0x4c, 0xef, 0xcf, 0xc4, 0x55, 0xc6, 0xb8, 0x06, 
		0xda, 0x91, 0x86, 0x47, 0x51, 0xc0, 0x81, 0x06, 0x4c, 0x6b, 0xeb, 0xc6, 0x4e, 0xdb, 0x7b, 0xb7, 
		0xdd, 0x4c, 0x0d, 0x92, 0xd8, 0xf1, 0x97, 0xc5, 0x0b, 0x39, 0x5f, 0xd0, 0x01, 0x51, 0x6b, 0xef, 
		0x19, 0xea, 0x39, 0xf9, 0xdc, 0x3c, 0xb1, 0x88, 0x8e, 0x4a, 0x58, 0x5a, 0x03, 0x68, 0xc6, 0xf7, 
		0xb5, 0xfb, 0x5a, 0x94, 0x13, 0x81, 0x2c, 0x38, 0x1b, 0xd1, 0x43, 0x1d, 0x2a, 0xa3, 0x09, 0x59, 
		0x13, 0x52, 0xfb, 0xbd, 0x6f, 0xe1, 0xa5, 0xfe, 0x35, 0x3d, 0xce, 0x12, 0x8b, 0xc1, 0xf0, 0xdd, 
		0xdb, 0xff, 0xeb, 0x0d, 0x28, 0xbe, 0xf9, 0x43, 0xa3, 0x3f, 0xe5, 0x73, 0x79, 0xc5, 0x78, 0x8d, 
		0xf0, 0x53, 0x35, 0x5d, 0xb2, 0xb8, 0x46, 0xb0, 0x68, 0xc9, 0xb5, 0xb8, 0x8b, 0xee, 0xdf, 0xb1, 
		0x77, 0xe0, 0x26, 0xc5, 0xc2, 0xb0, 0xe7, 0x2d, 0xcb, 0x0c, 0xac, 0x9a, 0x96, 0xbe, 0xa2, 0xd3, 
		0xd7, 0x75, 0x4d, 0x9f, 0x4c, 0xc8, 0x7a, 0xe5, 0x50, 0x78, 0x75, 0x12, 0xae, 0xf5, 0x7d, 0xbb, 
		0xb3, 0x24, 0x75, 0x84, 0x87, 0x60, 0xdc, 0x40, 0xbd, 0xbf, 0xff, 0x59, 0x28, 0x96, 0x6d, 0x72, 
		0xf0, 0x3f, 0xac, 0x4c, 0xe6, 0x19, 0x2a, 0xe6, 0x15, 0xd1, 0x76, 0xe9, 0x99, 0xe0, 0xb0, 0x42, 
		0xb5, 0x55, 0x3f, 0x11, 0x1f, 0xd5, 0xc1, 0xc2, 0x9e, 0xe0, 0x48, 0x79, 0xd7, 0x55, 0xc3, 0xb4, 
		0x64, 0x39, 0xba, 0x2c, 0x27, 0xb4, 0x3f, 0xfc, 0xde, 0x5c, 0x21, 0x04, 0xf7, 0xb7, 0x62, 0x90, 
		0xa5, 0xfa, 0xeb, 0x35, 0x33, 0x17, 0x7f, 0xfc, 0x99, 0xf7, 0xee, 0xc3, 0x4d, 0x04, 0x8b, 0xdf, 
		0x5b, 0xeb, 0xdf, 0x06, 0xb8, 0xa0, 0x9f, 0x6d, 0xd3, 0xa2, 0xdc, 0x2d, 0x6e, 0x80, 0x7a, 0xeb, 
		0xac, 0x9c, 0xe3, 0xb8, 0x6b, 0x2f, 0xfc, 0x36, 0xd3, 0x8d, 0x59, 0xfc, 0x2f, 0xab, 0xad, 0x3c, 
		0xfc, 0xde, 0x84, 0xa3, 0x40, 0xe5, 0x34, 0x81, 0x1e, 0x2a, 0x10, 0x2a, 0xa6, 0x45, 0xe0, 0x9c, 
		0xf2, 0xc2, 0x8e, 0x62, 0x6e, 0x24, 0x22, 0xb8, 0x77, 0x29, 0xf0, 0xef, 0x28, 0x50, 0x10, 0x13, 
		0x70, 0x99, 0x0f, 0xcc, 0x68, 0x8c, 0xe4, 0x82, 0xe4, 0x7c, 0x26, 0xc4, 0x49, 0x0d, 0x7c, 0xeb, 
		0x9e, 0xf4, 0x54, 0xfa, 0xe5, 0xfe, 0xd8, 0xc9, 0xab, 0x54, 0x1d, 0x63, 0xde, 0xfd, 0x9e, 0xac, 
		0xdf, 0xa4, 0xea, 0x47, 0xd8, 0x9c, 0x99, 0xb6, 0x50, 0x21, 0x84, 0xc3, 0xfc, 0xe1, 0x36, 0x1f, 
		0xd8, 0xbb, 0x9d, 0x4a, 0x77, 0xc6, 0x05, 0xb2, 0x97, 0x95, 0x48, 0x1f, 0xf9, 0xb9, 0x3e, 0x4e, 
		0x70, 0x88, 0x7b, 0xdc, 0x37, 0x1d, 0x3a, 0x67, 0x87, 0xa0, 0x94, 0xef, 0x69, 0xc8, 0xf6, 0x82, 
		0xca, 0x9d, 0xd1, 0x18, 0xcd, 0x83, 0x93, 0xbc, 0x65, 0x74, 0xd7, 0xec, 0x22, 0x8d, 0xd8, 0x43, 
		0x4b, 0xcc, 0x2c, 0x55, 0x2e, 0x18, 0xaf, 0xdb, 0xb4, 0x81, 0xbd, 0x10, 0x38, 0xca, 0xa4, 0x5a, 
		0x99, 0x24, 0x58, 0x2d, 0x8e, 0x3d, 0x69, 0x2c, 0x3a, 0x79, 0x33, 0x92, 0x01, 0x7f, 0x55, 0xd1, 
		0x99, 0xf8, 0x64, 0x79, 0x64, 0x93, 0xe0, 0x5a, 0xfd, 0x4d, 0x66, 0xed, 0x11, 0xef, 0x28, 0xf0, 
		0x70, 0xd8, 0x9b, 0x51, 0x63, 0xfc, 0x6f, 0x4d, 0x41, 0x2d, 0xc4, 0xd9, 0x3d, 0x9a, 0x9b, 0x41, 
		0x82, 0x95, 0x8a, 0x0f, 0x82, 0x99, 0xb5, 0x2e, 0x8a, 0x8b, 0xf9, 0x4f, 0x9a, 0x40, 0x6a, 0x8c, 
		0x75, 0x40, 0x00, 0x4b, 0xf4, 0xc9, 0x8d, 0x66, 0x9f, 0x17, 0xf2, 0x89, 0x7e, 0xe3, 0x93, 0xdb, 
		0x2d, 0x2a, 0x08, 0xe0, 0x2f, 0x2f, 0x16, 0x9e, 0x84, 0xc3, 0xdd, 0xfe, 0x7e, 0xc4, 0x52, 0x76, 
		0xd0, 0xe4, 0xf0, 0xe5, 0xe8, 0xab, 0xab, 0xbe, 0x7f, 0xc0, 0x26, 0x69, 0x6e, 0x64, 0x25, 0xe6, 
		0xc3, 0x3f, 0x45, 0xb4, 0x14, 0x5f, 0xeb, 0xf1, 0x13, 0x7e, 0x7a, 0xc2, 0x63, 0x83, 0xc9, 0xf5, 
		0xaa, 0x4c, 0xd4, 0xe5, 0xe8, 0xab, 0xb1, 0x9e, 0x07, 0xae, 0xc6, 0x42, 0xb3, 0x24, 0x3a, 0xac, 
		0x6b, 0x5c, 0xa9, 0x52, 0xd8, 0x30, 0x1c, 0x70, 0x5e, 0x42, 0x38, 0x63, 0xf2, 0x86, 0xb5, 0x52, 
		0x2b, 0x01, 0x12, 0x14, 0x9b, 0xd0, 0x87, 0x4e, 0x5f, 0x6b, 0x3c, 0xdc, 0xf5, 0x2b, 0xb8, 0x73, 
		0x4e, 0x0a, 0x9c, 0x84, 0x24, 0xab, 0x91, 0x63, 0x8e, 0x9a, 0x7f, 0xa8, 0xd2, 0xd4, 0x00, 0xd6, 
		0x7a, 0x8a, 0x14, 0x3a, 0xaa, 0x22, 0x16, 0x16, 0xb0, 0x7f, 0xee, 0xff, 0xdd, 0x82, 0x89, 0x84, 
		0x93, 0xd0, 0x86, 0x10, 0xa0, 0xd6, 0x32, 0x12, 0xca, 0x0b, 0xb7, 0x5a, 0xab, 0x75, 0x90, 0xc6, 
		0xc0, 0x6f, 0x40, 0x1f, 0xbc, 0xa9, 0x44, 0x3e, 0x22, 0x70, 0x46, 0x73, 0x12, 0x30, 0x93, 0x27, 
		0x63, 0x37, 0xcf, 0xbf, 0xf3, 0xbb, 0xe8, 0xc4, 0x3b, 0x1f, 0x48, 0x41, 0x27, 0x72, 0x4f, 0x6d, 
		0x24, 0x39, 0x00, 0x8a, 0x7a, 0x6e, 0xfa, 0x0d, 0xdc, 0xc8, 0xaa, 0xff, 0x3d, 0x3d, 0xc0, 0xa3, 
		0xe6, 0xc6, 0xdf, 0x59, 0xc6, 0x62, 0x99, 0xc2, 0x09, 0x5d, 0x9a, 0x25, 0xec, 0xd2, 0x23, 0x12, 
		0xcf, 0x6f, 0xbb, 0x45, 0x8b, 0x78, 0x21, 0xcc, 0x07, 0x0e, 0x84, 0x6d, 0x06, 0xb2, 0xf6, 0x42, 
		0x43, 0x05, 0x1f, 0xa6, 0xc0, 0xd1, 0x2e, 0x55, 0x5b, 0x4d, 0x15, 0xce, 0xa2, 0x9d, 0xf6, 0xfc, 
		0xe8, 0x99, 0xd8, 0x16, 0x99, 0xcf, 0x9f, 0xc4, 0xca, 0xcb, 0x3b, 0x83, 0x14, 0x96, 0x1f, 0x4a, 
		0xa3, 0x7c, 0xf5, 0x6e, 0x8a, 0x12, 0x90, 0xc3, 0x59, 0x78, 0x22, 0x04, 0xf2, 0xdc, 0xaf, 0x74, 
		0x98, 0x3f, 0xc1, 0xc6, 0x49, 0x7c, 0x5e, 0x3a, 0x4e, 0x86, 0x37, 0x0a, 0x10, 0xf1, 0x22, 0x04, 
		0x2d, 0xb4, 0xca, 0x78, 0xcb, 0x2d, 0xa5, 0x54, 0x2d, 0x65, 0x27, 0x8e, 0x84, 0x96, 0x36, 0xc2, 
		0x07, 0xea, 0xdd, 0x1d, 0x45, 0x86, 0x44, 0x79, 0xba, 0xc7, 0xe0, 0xc9, 0xa1, 0xcb, 0xe7, 0xb8, 
		0x0a, 0x34, 0x07, 0x8d, 0x2c, 0x28, 0x57, 0x52, 0xfc, 0x9c, 0x8e, 0x35, 0xff, 0xd3, 0x73, 0x2e
	};

	int i;
	for(i = 0; i < 64; i++) {
		string data;
		data.assign((const char *)key[i], 16);
		data += hash;
		xor_key += md5_bin(data);
	}

	lock.lock();
	if(key_catch.size() >= 100) {
		key_catch.clear();
	}
	key_catch.insert(map<string, string>::value_type(hash, xor_key));
	lock.unlock();

	return xor_key;
}

int Xor(string fn, string hash) {
	FILE * fp;
	fp = fopen(fn.c_str(), "rb+");
	if(fp == NULL) {
		return -1;
	}

	string xor_key = GetXorKey(hash);
	if(xor_key.size() != 1024) {
		return -1;
	}

	fseek(fp, 0L, SEEK_END);
	int flen = ftell(fp);
	rewind(fp);

	int rest = flen%1024;
	int n;
	if(rest == 0) {
		n = flen/1024;
	}
	else {
		n = flen/1024 + 1;
	
	}

	int i, j;
	for(i = 0; i < n; i++) {
		unsigned char data[1024] = { 0 };
		int len = 1024;
		if(i == n-1 && rest > 0) {
			len = rest;
		}
		int read_len = fread(data, 1, len, fp);
		if(read_len == len) {
			for(j = 0; j < read_len; j++) {
				data[j] ^= (unsigned char)xor_key[j];
			}
			fseek(fp, i*1024, SEEK_SET);
			fwrite(data, 1, read_len, fp);
			fflush(fp);
		}
		else {
			fclose(fp);
			return -1;
		}
	}
	fclose(fp);
	
	return 0;
}

int Xor(char * data, int len, string hash, int offset) {
	if(data == NULL || len <= 0 || offset < 0) {
		return -1;
	}
	
	string xor_key = GetXorKey(hash);
	if(xor_key.size() != 1024) {
		return -1;
	}

	int xor_offset = offset%1024;

	unsigned char * d = (unsigned char *)data;

	int i;
	for(i = 0; i < len; i++) {
		d[i] ^= (unsigned char)xor_key[(i+xor_offset)%1024];
	}

	return 0;
}

